<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[jQuery选择器]]></title>
    <url>%2F2019%2F04%2F09%2FjQuery%E9%80%89%E6%8B%A9%E5%99%A8%2F</url>
    <content type="text"><![CDATA[整理了一下jQuery的选择器，方便查阅1 基本选择器 选择器 描述 返回 #id 根据给定的id匹配一个元素 单个元素 .class 根据给定的类名匹配元素 集合元素 element 根据给定的元素名匹配元素 集合元素 * 匹配所有元素 集合元素 selector1,selector2,……,selectorN 将每一个选择器匹配到的元素合并后一起返回 集合元素 2 层次选择器 选择器 描述 返回 $(‘ancestor descendant’) 选取ancestor元素里的所有descendant元素 集合元素 $(‘parent&gt;child’) 选取parent元素下的child元素 集合元素 $(‘prev+next’) 选取紧挨着prev元素后的next元素 集合元素 $(‘prev~siblings’) 选取prev元素之后的所有siblings元素 集合元素 $(‘.one+div’)等价于$(‘.one’).next(‘div’) $(‘#prev~div’)等价于$(‘#prev’).nextAll(‘div’) 3 过滤选择器3.1 基本过滤选择器 选择器 描述 返回 :first 选取第1个元素 单个元素 :last 选取最后一个元素 单个元素 :not(selector) 去除所有与给定选择器匹配的元素 集合元素 :even 选取索引是偶数的所有元素，索引从0开始 集合元素 :odd 选取索引是奇数的所有元素，索引从0开始 集合元素 :eq(index) 选取索引等于index的元素，索引从0开始 单个元素 :gt(index) 选取索引大于index的元素，索引从0开始 集合元素 :lt(index) 选取索引小于index的元素，索引从0开始 集合元素 :header 选取所有的标题元素 集合元素 :animated 选取正在执行动画的所有元素 集合元素 :focus 选取当前获取焦点的元素 集合元素 3.2 内容过滤选择器 选择器 描述 返回 :contains(text) 选取含有文本内容为’text’的元素 集合元素 :empty 选取不包含子元素或者文本的空元素 集合元素 :has(selector) 选取含有选择器所匹配的元素的元素 集合元素 :parent 选取含有子元素或者文本的元素 集合元素 3.3 可见性过滤选择器 选择器 描述 返回 :hidden 选取所有不可见的元素 集合元素 :visible 选取所有可见的元素 集合元素 3.4 属性过滤选择器 选择器 描述 返回 [attribute] 选取拥有此属性的元素 集合元素 [attribute=value] 选取属性值为value的元素 集合元素 [attribute!=value] 选取属性值不为value的元素 集合元素 [attribute^=value] 选取属性值以value开始的元素 集合元素 [attribute$=value] 选取属性值以value结束的元素 集合元素 [attribute*=value] 选取属性值含有value的元素 集合元素 [attribute\ =value] 选取属性等于给定字符串或以该字符串为前缀(该字符串后跟一个连字符’-‘)的元素 集合元素 [attribute~=value] 选取属性用空格分隔的值中包含一个给定值的元素 集合元素 [attribute1][attribute2][attributeN] 用属性选择器合并成一个复合属性选择器，满足多个条件。每选择一次，缩小一次范围 集合元素 3.5 子元素过滤选择器 选择器 描述 返回 :nth-child(index/even/odd/equation) 选取每个父元素下的第index个子元素或者奇偶元素，index从1开始 集合元素 :first-child 选取每个父元素的第1个子元素 集合元素 :last-child 选取每个父元素的最后一个子元素 集合元素 :only-child 如果某个元素是它父元素中惟一的子元素，那么将会被匹配。如果父元素中含有其他元素，则不会被匹配 集合元素 3.6 表单对象属性过滤选择器 选择器 描述 返回 :enabled 选取所有可用元素 集合元素 :disabled 选取所有不可用元素 集合元素 :checked 选取所有被选中的元素(单选框，复选框) 集合元素 :selected 选取所有被选中的选项元素(下拉列表) 集合元素 4 表单选择器 选择器 描述 返回 :input 选取所有的\、\、\和\ 元素 集合元素 :text 选取所有的单行文本框 集合元素 :password 选取所有的密码框 集合元素 :radio 选取所有的单选框 集合元素 :checkbox 选取所有的多选框 集合元素 :submit 选取所有的提交按钮 集合元素 :image 选取所有的图像按钮 集合元素 :reset 选取所有的重置按钮 集合元素 :button 选取所有的按钮 集合元素 :file 选取所有的上传域 集合元素 :hidden 选取所有不可见元素 集合元素]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS中数组遍历]]></title>
    <url>%2F2019%2F04%2F02%2FJS%E4%B8%AD%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[1.新建数组1let list = [10,20,30]; 2.遍历方法 common： 123for(let val = 0; val &lt; list.length; val++)&#123; console.log(list[val]);&#125; forEach： 123list.forEach(function(val,index,array)&#123; console.log(val);&#125;) break、continue及return语句失效 map： 1234list.map(function(val,index,array)&#123; //do something return XXX;&#125;) 有返回值，可以return出来 map的回调函数中支持return返回值；return的是啥，相当于把数组中的这一项变为啥（并不影响原来的数组，只是相当于把原数组克隆一份，把克隆的这一份的数组中的对应项改变了） for-in： 123for(let val in list)&#123; console.log(list[val]);&#125; 极不推荐，for-in 是为普通对象设计的，你可以遍历得到字符串类型的键，因此不适用于数组遍历 for-of： 123for (let val of list)&#123; console.log(val);&#125; 最简洁、最直接，避开for-in循环的所有缺陷 break、continue和return语句有效]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vultr配置]]></title>
    <url>%2F2019%2F03%2F31%2FVultr%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[1. 搭建 Shadowsocks 服务器端中文版： 1wget --no-check-certificate https://www.peiski.top/Vultr_ShadowSocks/shadowsocks-libev_CN.sh 1bash shadowsocks-libev_CN.sh 英文版：（如果中文版执行后出现乱码，那么请使用这个） 1wget --no-check-certificate https://www.peiski.top/Vultr_ShadowSocks/shadowsocks-libev.sh 1bash shadowsocks-libev.sh 2. 安装 TCP 加速软件前面虽然已经搭建好了 SS，但是因为服务器位于国外，连接速度会较慢，所以我们非常必要在服务器上安装 TCP 加速软件来提速。一般大家常用的 TCP 加速软件有锐速和 Google BBR 拥塞控制算法。 注意：两者不能同时安装，大家根据自己的喜好选择其中一个安装即可！ 安装锐速请使用《CentOS6/7 专用破解版锐速一键安装脚本》或参考附2 安装 BBR 请按照《一键安装原版 &amp; 魔改版 Google BBR 拥塞控制算法教程》 附1.修改或卸载 Shadowsocks 配置运行下列命令，按照提示选择你所需要的操作： 中文版： 1bash shadowsocks-libev_CN.sh 英文版： 1bash shadowsocks-libev.sh 附2.CentOS6/7 专用破解版锐速一键安装脚本一、注意事项 安装锐速需降级系统内核，而安装 Google BBR 则需升级系统内核，故两者不能同时安装 安装锐速需降级系统内核，有可能造成系统不稳定，故不建议将其应用在重要的生产环境中 本教程只支持 CentOS6 x64 及 CentOS7 x64 系统，不支持任何 Debian &amp; Ubuntu 系统！ 二、判断系统类型 1uname -r 系统内核版本主要分三种情况： 结果以 2 开头，例如 2.6.32-696.18.7.el6.x86_64，说明服务器为 CentOS6 x64 系统，查看第三步。 结果以 3 开头，例如 3.10.0-693.11.6.el7.x86_64，说明服务器为 CentOS7 x64 系统，查看第四步。 结果以 4开头，例如 4.12.10-1.el7.elrepo.x86_64，说明服务器已经安装 Google BBR 拥塞控制算法，无法安装锐速。 三、CentOS6 x64 系统安装锐速 1wget --no-check-certificate https://www.peiski.top/Vultr_ShadowSocks/appex.sh 1bash appex.sh install '2.6.32-642.el6.x86_64' 四、CentOS7 x64 系统安装锐速 1wget --no-check-certificate https://www.peiski.top/Vultr_ShadowSocks/rskernel.sh 1bash rskernel.sh 回车后，等待内核更换完毕后系统会自动重启并断开连接，重新连接服务器，继续复制命令： 1yum install net-tools -y 1wget --no-check-certificate https://www.peiski.top/Vultr_ShadowSocks/appex.sh 1bash appex.sh install 一直回车即可。]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
  </entry>
</search>
